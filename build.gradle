apply plugin: 'java'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'commons-io:commons-io:2.4'
        classpath 'org.apache.commons:commons-compress:1.8'
    }
}

repositories {
    mavenCentral()
    maven {
        url "http://nxparser.googlecode.com/svn/repository"
    }
}
dependencies {
    //for dependencies found in artifact repositories you can use
    //the group:name:version notation
    compile 'junit:junit:4.11'
    compile 'com.carrotsearch:junit-benchmarks:0.7.2'
    compile 'com.h2database:h2:1.3.160'
    compile 'org.semanticweb.yars:nxparser:1.2.3'
    compile 'com.google.guava:guava:+'
    compile 'org.apache.commons:commons-collections4:+'
    compile 'org.apache.commons:commons-lang3:+'

}

test {
    minHeapSize = "512m"
    maxHeapSize = "8g"
    jvmArgs '-XX:MaxPermSize=2g'
}

test.doFirst {
    println "load data..."
    try {
        println "load data test $threshold $lines $testData $cores"
        FileWriter f = new FileWriter("src/test/resources/testConfig.properties");
        f.write("threshold=$threshold\nlines=$lines\ntestData=$testData\ncores=$cores");
        f.close();
    } catch (Exception e) {

    }
}

task downloadTestData << {
    File tmp = new File(".tmptestdata");
    File labels = new File("$testData");
    if (!labels.exists()) {
        if (!tmp.exists())
            org.apache.commons.io.FileUtils.copyURLToFile(new java.net.URL("$testDataUrl"), tmp);
        FileInputStream fIn = new FileInputStream(tmp);

        org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream labelsIn = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream(fIn, true);
        BufferedReader bIn = new BufferedReader(new InputStreamReader(labelsIn));
        bIn.readLine();
        InputStream sIn = new org.apache.commons.io.input.ReaderInputStream(bIn);
        final byte[] buffer = new byte[1024];
        int n = 0;
        FileOutputStream labelsOut = new FileOutputStream(new File("$testData"));
        while (-1 != (n = sIn.read(buffer))) {
            labelsOut.write(buffer, 0, n);
        }
        labelsOut.flush();
        labelsOut.close();
        sIn.close();
        bIn.close();
        fIn.close();
        labelsIn.close();
    }
}